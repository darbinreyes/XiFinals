
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 23 16:38:53 EST 2011
//----------------------------------------------------

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 23 16:38:53 EST 2011
  */
public class ixiparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ixiparser() {super();}

  /** Constructor which sets the default scanner. */
  public ixiparser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ixiparser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\003\003\000\002\006" +
    "\003\000\002\006\003\000\002\005\002\000\002\005\003" +
    "\000\002\004\006\000\002\010\002\000\002\010\006\000" +
    "\002\011\002\000\002\011\003\000\002\011\005\000\002" +
    "\007\002\000\002\007\005\000\002\007\006\000\002\012" +
    "\007\000\002\002\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\005\001\002\000\006\002\037\004" +
    "\005\001\002\000\006\046\000\052\000\001\002\000\004" +
    "\046\010\001\002\000\006\002\ufff1\004\ufff1\001\002\000" +
    "\010\004\005\047\ufff8\053\ufff8\001\002\000\006\047\026" +
    "\053\025\001\002\000\006\047\ufff7\053\ufff7\001\002\000" +
    "\004\052\014\001\002\000\006\012\017\013\016\001\002" +
    "\000\010\044\ufffa\047\ufffa\053\ufffa\001\002\000\014\002" +
    "\ufffe\004\ufffe\044\ufffe\047\ufffe\053\ufffe\001\002\000\014" +
    "\002\uffff\004\uffff\044\uffff\047\uffff\053\uffff\001\002\000" +
    "\010\044\021\047\ufffb\053\ufffb\001\002\000\006\007\022" +
    "\045\ufffd\001\002\000\004\045\ufffc\001\002\000\004\045" +
    "\024\001\002\000\014\002\ufff9\004\ufff9\044\ufff9\047\ufff9" +
    "\053\ufff9\001\002\000\004\004\005\001\002\000\012\002" +
    "\ufff5\004\ufff5\052\030\053\ufff5\001\002\000\010\002\ufff2" +
    "\004\ufff2\053\033\001\002\000\006\012\017\013\016\001" +
    "\002\000\012\002\ufffa\004\ufffa\044\ufffa\053\ufffa\001\002" +
    "\000\012\002\ufff4\004\ufff4\044\021\053\ufff4\001\002\000" +
    "\006\012\017\013\016\001\002\000\012\002\ufffa\004\ufffa" +
    "\044\ufffa\053\ufffa\001\002\000\012\002\ufff3\004\ufff3\044" +
    "\021\053\ufff3\001\002\000\006\047\ufff6\053\ufff6\001\002" +
    "\000\004\002\001\001\002\000\006\002\ufff0\004\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\010\002\003\003\005\012\006\001\001\000" +
    "\006\003\005\012\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\012\004\011\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\014\001\001\000\004\010\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\012\004\035\001\001" +
    "\000\004\007\026\001\001\000\002\001\001\000\004\006" +
    "\030\001\001\000\004\010\031\001\001\000\002\001\001" +
    "\000\004\006\033\001\001\000\004\010\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ixiparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ixiparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ixiparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		if (t != null)
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ixiparser$actions {


	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}

  private final ixiparser parser;

  /** Constructor */
  CUP$ixiparser$actions(ixiparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ixiparser$do_action(
    int                        CUP$ixiparser$act_num,
    java_cup.runtime.lr_parser CUP$ixiparser$parser,
    java.util.Stack            CUP$ixiparser$stack,
    int                        CUP$ixiparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ixiparser$result;

      /* select the action based on the action number */
      switch (CUP$ixiparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // program ::= program func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-4)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		ArrayList<XiPrimitiveType> types = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, null, id.position());
		RESULT = func_decl; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("func_decl",8, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-4)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).right;
		ArrayList<XiPrimitiveType> arr = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types ::= COLON type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
		 RESULT = new ArrayList<XiPrimitiveType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types ::= 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		 RESULT = new ArrayList<XiPrimitiveType>(); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_list ::= func_list COMMA var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("func_list",7, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-2)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("func_list",7, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("func_list",7, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		VisualizableTreeNode t = (VisualizableTreeNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("bracket_list",6, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("bracket_list",6, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-3)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dimension ::= INTEGER_LITERAL 
            {
              VisualizableTreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
			String s = t.value();
		RESULT = new IntegerLiteralNode(Long.parseLong(s), t.position()); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("dimension",3, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dimension ::= 
            {
              VisualizableTreeNode RESULT =null;

              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("dimension",3, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= BOOL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // id ::= IDENTIFIER 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$ixiparser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("id",1, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          return CUP$ixiparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).right;
		AbstractSyntaxNode start_val = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)).value;
		RESULT = start_val;
              CUP$ixiparser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ixiparser$stack.elementAt(CUP$ixiparser$top-1)), ((java_cup.runtime.Symbol)CUP$ixiparser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ixiparser$parser.done_parsing();
          return CUP$ixiparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

