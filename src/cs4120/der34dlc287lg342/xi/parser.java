
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 14 08:10:26 EST 2011
//----------------------------------------------------

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;
import cs4120.der34dlc287lg342.xi.sym;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 14 08:10:26 EST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\045\003\000\002\045" +
    "\003\000\002\012\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\005" +
    "\003\000\002\005\003\000\002\006\006\000\002\006\006" +
    "\000\002\044\002\000\002\044\003\000\002\044\005\000" +
    "\002\007\006\000\002\010\004\000\002\010\006\000\002" +
    "\010\007\000\002\011\003\000\002\011\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\026\003\000\002" +
    "\026\003\000\002\016\003\000\002\016\004\000\002\017" +
    "\007\000\002\017\011\000\002\020\007\000\002\021\004" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\025\003\000\002\025" +
    "\004\000\002\024\003\000\002\024\004\000\002\036\003" +
    "\000\002\036\003\000\002\035\002\000\002\035\003\000" +
    "\002\027\006\000\002\037\004\000\002\037\004\000\002" +
    "\030\006\000\002\031\005\000\002\031\003\000\002\041" +
    "\002\000\002\041\006\000\002\033\003\000\002\033\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\005\000" +
    "\002\042\005\000\002\032\005\000\002\014\003\000\002" +
    "\014\003\000\002\013\006\000\002\013\006\000\002\034" +
    "\005\000\002\034\005\000\002\047\004\000\002\047\005" +
    "\000\002\043\002\000\002\043\003\000\002\043\005\000" +
    "\002\040\002\000\002\040\005\000\002\040\006\000\002" +
    "\046\010\000\002\003\003\000\002\003\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\004\005\024\006\001\002\000\006\002" +
    "\261\004\005\001\002\000\104\003\ufffe\004\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\004" +
    "\005\001\002\000\006\004\uff99\024\uff99\001\002\000\006" +
    "\002\uff96\004\uff96\001\002\000\004\047\015\001\002\000" +
    "\006\004\005\024\006\001\002\000\006\004\uff98\024\uff98" +
    "\001\002\000\006\002\uff97\004\uff97\001\002\000\010\004" +
    "\005\050\uffa0\054\uffa0\001\002\000\006\050\133\054\132" +
    "\001\002\000\006\050\uff9f\054\uff9f\001\002\000\004\053" +
    "\021\001\002\000\006\012\024\013\023\001\002\000\042" +
    "\003\uffb1\004\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\025\uffb1\044\uffb1\045\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\001\002\000\042\003\uffba\004" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\025\uffba" +
    "\044\uffba\045\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055" +
    "\uffba\056\uffba\001\002\000\042\003\uffbb\004\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\044\uffbb\045" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\042\003\uffb7\004\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\025\uffb7\044\uffb7\045\026\050\uffb7" +
    "\051\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000" +
    "\030\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\046\uffb9\047\037\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\074\003" +
    "\uffe9\004\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\001\002\000\004\047\126\001\002" +
    "\000\076\003\uffe7\004\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\120\050\uffe7" +
    "\051\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000" +
    "\074\003\000\004\000\017\000\020\000\021\000\022\000" +
    "\023\000\025\000\026\000\027\000\030\000\031\000\032" +
    "\000\034\000\035\000\036\000\037\000\040\000\041\000" +
    "\042\000\043\000\045\000\046\000\050\000\051\000\052" +
    "\000\054\000\055\000\056\000\001\002\000\004\046\117" +
    "\001\002\000\074\003\uffeb\004\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000" +
    "\074\003\uffec\004\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\045\uffec\046\uffec\050\uffec\051\uffec\052" +
    "\uffec\054\uffec\055\uffec\056\uffec\001\002\000\030\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\050\106\001\002\000\074\003\uffff" +
    "\004\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052\uffff\054\uffff" +
    "\055\uffff\056\uffff\001\002\000\074\003\uffe8\004\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\052\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\074\003\uffee\004\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\050" +
    "\uffee\051\uffee\052\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\074\003\uffea\004\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\045\uffea\046\uffea\050\uffea\051\uffea" +
    "\052\uffea\054\uffea\055\uffea\056\uffea\001\002\000\026\004" +
    "\005\005\035\006\036\007\046\010\033\011\040\025\031" +
    "\027\027\033\044\047\037\001\002\000\040\026\053\027" +
    "\050\030\060\031\051\032\056\034\062\035\064\036\055" +
    "\037\061\040\047\041\063\042\052\043\057\045\054\046" +
    "\uffb8\001\002\000\074\003\uffed\004\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\045\uffed\046\uffed\050" +
    "\uffed\051\uffed\052\uffed\054\uffed\055\uffed\056\uffed\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\026" +
    "\004\005\005\035\006\036\007\046\010\033\011\040\025" +
    "\031\027\027\033\044\047\037\001\002\000\026\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\001\002\000\026\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\001\002\000\026\004\005\005\035\006\036" +
    "\007\046\010\033\011\040\025\031\027\027\033\044\047" +
    "\037\001\002\000\026\004\005\005\035\006\036\007\046" +
    "\010\033\011\040\025\031\027\027\033\044\047\037\001" +
    "\002\000\026\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\026\004" +
    "\005\005\035\006\036\007\046\010\033\011\040\025\031" +
    "\027\027\033\044\047\037\001\002\000\026\004\005\005" +
    "\035\006\036\007\046\010\033\011\040\025\031\027\027" +
    "\033\044\047\037\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\026\004\005\005\035\006\036\007" +
    "\046\010\033\011\040\025\031\027\027\033\044\047\037" +
    "\001\002\000\026\004\005\005\035\006\036\007\046\010" +
    "\033\011\040\025\031\027\027\033\044\047\037\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\074" +
    "\003\ufff9\004\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\025\ufff9\026\053\027\050\030\060\031\051\032\056" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\045\054\046\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\001\002\000\074\003\ufffc\004" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc" +
    "\026\053\027\050\030\060\031\051\032\056\034\062\035" +
    "\064\036\055\037\061\040\047\041\ufffc\042\052\043\057" +
    "\045\054\046\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\074\003\ufff7\004\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\026\053\027" +
    "\050\030\060\031\051\032\056\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\045\054\046" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\001\002\000\074\003\ufff8\004\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\025\ufff8\026\053\027\050\030\060" +
    "\031\051\032\056\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\045\054\046\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\074\003\ufff3\004\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\045\054\046\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\074\003\ufffa" +
    "\004\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025" +
    "\ufffa\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\045\054\046\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\001\002\000\074\003\ufff1\004\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\045\054" +
    "\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056" +
    "\ufff1\001\002\000\074\003\ufff6\004\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\025\ufff6\026\053\027\050\030" +
    "\060\031\051\032\056\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\045\054\046\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002" +
    "\000\040\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\046\076\001\002\000\074\003\uffde\004" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055" +
    "\uffde\056\uffde\001\002\000\074\003\ufff5\004\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\060\031\051\032\056\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\054\046" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\001\002\000\074\003\ufffb\004\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\025\ufffb\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\045\054\046\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\001\002\000" +
    "\074\003\ufff2\004\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\045\054\046\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002\000\074\003\ufff4" +
    "\004\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\060\031\051\032\056\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\054\046\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\074\003\ufffd\004\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\026\053" +
    "\027\050\030\060\031\051\032\056\034\062\035\064\036" +
    "\055\037\061\040\ufffd\041\ufffd\042\052\043\057\045\054" +
    "\046\ufffd\050\ufffd\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056" +
    "\ufffd\001\002\000\074\003\ufff0\004\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\054\046\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002" +
    "\000\042\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\050\110\054\107\001\002\000\074\003" +
    "\uffdd\004\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\030\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\050\112\001\002\000\074\003\uffe6\004\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\042\026\053\027\050\030\060\031" +
    "\051\032\056\034\062\035\064\036\055\037\061\040\047" +
    "\041\063\042\052\043\057\045\054\050\uffda\054\uffda\001" +
    "\002\000\074\003\uffdc\004\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\006" +
    "\050\115\054\114\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\074\003\uffdb\004\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\001" +
    "\002\000\042\026\053\027\050\030\060\031\051\032\056" +
    "\034\062\035\064\036\055\037\061\040\047\041\063\042" +
    "\052\043\057\045\054\050\uffd9\054\uffd9\001\002\000\042" +
    "\003\uffb0\004\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\025\uffb0\044\uffb0\045\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\001\002\000\032\004\005\005" +
    "\035\006\036\007\046\010\033\011\040\025\031\027\027" +
    "\033\044\047\037\050\uffe1\054\uffe1\001\002\000\006\050" +
    "\124\054\123\001\002\000\042\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\047\041\063\042\052\043\057\045\054\050\uffe0\054\uffe0" +
    "\001\002\000\026\004\005\005\035\006\036\007\046\010" +
    "\033\011\040\025\031\027\027\033\044\047\037\001\002" +
    "\000\074\003\uffe3\004\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\042\026" +
    "\053\027\050\030\060\031\051\032\056\034\062\035\064" +
    "\036\055\037\061\040\047\041\063\042\052\043\057\045" +
    "\054\050\uffdf\054\uffdf\001\002\000\026\004\005\005\035" +
    "\006\036\007\046\010\033\011\040\025\031\027\027\033" +
    "\044\047\037\001\002\000\040\026\053\027\050\030\060" +
    "\031\051\032\056\034\062\035\064\036\055\037\061\040" +
    "\047\041\063\042\052\043\057\045\054\050\130\001\002" +
    "\000\074\003\uffe2\004\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\074\003" +
    "\uffef\004\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\045\054\046\uffef\050\uffef\051\uffef\052\uffef\054" +
    "\uffef\055\uffef\056\uffef\001\002\000\004\004\005\001\002" +
    "\000\010\051\uff9d\053\135\054\uff9d\001\002\000\006\051" +
    "\142\054\140\001\002\000\006\012\024\013\023\001\002" +
    "\000\010\045\uffb1\051\uffb1\054\uffb1\001\002\000\010\045" +
    "\026\051\uff9c\054\uff9c\001\002\000\006\012\024\013\023" +
    "\001\002\000\006\002\uff9a\004\uff9a\001\002\000\026\003" +
    "\166\004\005\017\151\021\147\022\163\023\150\025\031" +
    "\051\142\052\164\056\143\001\002\000\006\044\uffac\054" +
    "\uffac\001\002\000\032\003\uffd7\004\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\025\uffd7\051\uffd7\052\uffd7\055" +
    "\uffd7\056\uffd7\001\002\000\006\044\245\045\246\001\002" +
    "\000\006\044\240\054\237\001\002\000\004\047\233\001" +
    "\002\000\032\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\052\uffc7\055" +
    "\uffc7\001\002\000\004\047\217\001\002\000\032\003\uffd3" +
    "\004\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\051\uffd3\052\uffd3\055\uffd3\056\uffd3\001\002\000\032" +
    "\003\uffd4\004\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\025\uffd4\051\uffd4\052\uffd4\055\uffd4\056\uffd4\001\002" +
    "\000\004\045\214\001\002\000\032\003\uffd1\004\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\051\uffd1" +
    "\052\uffd1\055\uffd1\056\uffd1\001\002\000\036\003\uffd2\004" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\025\uffd2" +
    "\044\uffad\051\uffd2\052\uffd2\054\uffad\055\uffd2\056\uffd2\001" +
    "\002\000\026\003\166\004\005\017\151\021\147\022\163" +
    "\023\150\025\031\051\142\052\211\056\143\001\002\000" +
    "\034\003\uffd5\004\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\025\uffd5\045\uffa7\051\uffd5\052\uffd5\055\uffd5\056" +
    "\uffd5\001\002\000\006\052\206\055\207\001\002\000\012" +
    "\044\176\045\uffa8\047\120\053\177\001\002\000\032\003" +
    "\uffd6\004\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\025\uffd6\051\uffd6\052\uffd6\055\uffd6\056\uffd6\001\002\000" +
    "\034\002\uffc3\003\uffc3\004\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\025\uffc3\051\uffc3\052\uffc3\055\uffc3\056" +
    "\uffc3\001\002\000\032\003\uffd0\004\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\025\uffd0\051\uffd0\052\uffd0\055" +
    "\uffd0\056\uffd0\001\002\000\032\003\uffb2\004\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\051\uffb2\052" +
    "\uffb2\055\uffb2\056\uffb2\001\002\000\026\003\uffbd\004\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\051\uffbd\052" +
    "\uffbd\056\uffbd\001\002\000\004\044\174\001\002\000\032" +
    "\003\uffd8\004\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\025\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8\001\002" +
    "\000\030\003\uffbf\004\uffbf\017\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\025\uffbf\051\uffbf\052\uffbf\055\173\056\uffbf\001\002" +
    "\000\026\003\uffbe\004\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\051\uffbe\052\uffbe\056\uffbe\001\002\000\026" +
    "\004\005\005\035\006\036\007\046\010\033\011\040\025" +
    "\031\027\027\033\044\047\037\001\002\000\066\003\uffb3" +
    "\004\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\051\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\010" +
    "\012\024\013\023\014\200\001\002\000\006\012\204\013" +
    "\203\001\002\000\006\044\uffb1\045\uffb1\001\002\000\006" +
    "\044\uffb4\045\026\001\002\000\006\044\uffb5\045\uffb5\001" +
    "\002\000\006\044\uffb6\045\uffb6\001\002\000\066\003\uffa4" +
    "\004\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\025" +
    "\uffa4\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\051\uffa4\052\uffa4\055\uffa4\056\uffa4\001\002" +
    "\000\034\002\uffc2\003\uffc2\004\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\001\002\000\006\052\uffc6\055\uffc6\001\002\000" +
    "\006\052\213\055\207\001\002\000\034\002\uffc1\003\uffc1" +
    "\004\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\051\uffc1\052\uffc1\055\uffc1\056\uffc1\001\002\000\026" +
    "\003\uffbc\004\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\051\uffbc\052\uffbc\056\uffbc\001\002\000\034\002\uffc0" +
    "\003\uffc0\004\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\025\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0\001\002" +
    "\000\026\004\005\005\035\006\036\007\046\010\033\011" +
    "\040\025\031\027\027\033\044\047\037\001\002\000\040" +
    "\026\053\027\050\030\060\031\051\032\056\034\062\035" +
    "\064\036\055\037\061\040\047\041\063\042\052\043\057" +
    "\045\054\046\216\001\002\000\006\044\uffa6\045\uffa6\001" +
    "\002\000\026\004\005\005\035\006\036\007\046\010\033" +
    "\011\040\025\031\027\027\033\044\047\037\001\002\000" +
    "\040\026\053\027\050\030\060\031\051\032\056\034\062" +
    "\035\064\036\055\037\061\040\047\041\063\042\052\043" +
    "\057\045\054\050\221\001\002\000\022\003\166\004\005" +
    "\017\151\021\147\022\163\025\031\051\142\056\143\001" +
    "\002\000\032\003\uffcb\004\uffcb\017\uffcb\020\225\021\uffcb" +
    "\022\uffcb\023\uffcb\025\uffcb\051\uffcb\052\uffcb\055\uffcb\056" +
    "\uffcb\001\002\000\032\003\uffcd\004\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\025\uffcd\051\uffcd\052\uffcd\055" +
    "\224\056\uffcd\001\002\000\032\003\uffcc\004\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\051\uffcc\052" +
    "\uffcc\055\uffcc\056\uffcc\001\002\000\022\003\166\004\005" +
    "\017\151\021\147\022\163\025\031\051\142\056\143\001" +
    "\002\000\032\003\uffca\004\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\025\uffca\051\uffca\052\uffca\055\uffca\056" +
    "\uffca\001\002\000\010\052\uffc8\054\231\055\uffc8\001\002" +
    "\000\044\026\053\027\050\030\060\031\051\032\056\034" +
    "\062\035\064\036\055\037\061\040\047\041\063\042\052" +
    "\043\057\045\054\052\uffc5\054\uffc5\055\uffc5\001\002\000" +
    "\026\004\005\005\035\006\036\007\046\010\033\011\040" +
    "\025\031\027\027\033\044\047\037\001\002\000\044\026" +
    "\053\027\050\030\060\031\051\032\056\034\062\035\064" +
    "\036\055\037\061\040\047\041\063\042\052\043\057\045" +
    "\054\052\uffc4\054\uffc4\055\uffc4\001\002\000\026\004\005" +
    "\005\035\006\036\007\046\010\033\011\040\025\031\027" +
    "\027\033\044\047\037\001\002\000\040\026\053\027\050" +
    "\030\060\031\051\032\056\034\062\035\064\036\055\037" +
    "\061\040\047\041\063\042\052\043\057\045\054\050\235" +
    "\001\002\000\022\003\166\004\005\017\151\021\147\022" +
    "\163\025\031\051\142\056\143\001\002\000\032\003\uffc9" +
    "\004\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025" +
    "\uffc9\051\uffc9\052\uffc9\055\uffc9\056\uffc9\001\002\000\006" +
    "\004\005\056\243\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\066\003\uffa9\004\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\026\053\027\050" +
    "\030\060\031\051\032\056\034\062\035\064\036\055\037" +
    "\061\040\047\041\063\042\052\043\057\045\054\051\uffa9" +
    "\052\uffa9\055\uffa9\056\uffa9\001\002\000\006\044\uffaa\054" +
    "\uffaa\001\002\000\006\044\uffae\054\uffae\001\002\000\006" +
    "\044\uffaf\054\uffaf\001\002\000\026\004\005\005\035\006" +
    "\036\007\046\010\033\011\040\025\031\027\027\033\044" +
    "\047\037\001\002\000\026\004\005\005\035\006\036\007" +
    "\046\010\033\011\040\025\031\027\027\033\044\047\037" +
    "\001\002\000\040\026\053\027\050\030\060\031\051\032" +
    "\056\034\062\035\064\036\055\037\061\040\047\041\063" +
    "\042\052\043\057\045\054\046\250\001\002\000\006\044" +
    "\uffa5\045\uffa5\001\002\000\066\003\uffa3\004\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026\053\027" +
    "\050\030\060\031\051\032\056\034\062\035\064\036\055" +
    "\037\061\040\047\041\063\042\052\043\057\045\054\051" +
    "\uffa3\052\uffa3\055\uffa3\056\uffa3\001\002\000\006\004\005" +
    "\056\243\001\002\000\006\044\uffab\054\uffab\001\002\000" +
    "\010\045\uffb1\051\uffb1\054\uffb1\001\002\000\010\045\026" +
    "\051\uff9b\054\uff9b\001\002\000\006\050\uff9e\054\uff9e\001" +
    "\002\000\010\004\uffa2\024\uffa2\055\260\001\002\000\006" +
    "\004\uffa1\024\uffa1\001\002\000\004\002\001\001\002\000" +
    "\006\002\uff95\004\uff95\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\014\002\003\003\011\012\010\046\007\047" +
    "\006\001\001\000\006\012\010\046\261\001\001\000\002" +
    "\001\001\000\004\012\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\010\046\013" +
    "\047\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\027\016\043\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\021\001" +
    "\001\000\004\041\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\044\006\041\007" +
    "\027\010\040\012\031\035\033\045\042\001\001\000\016" +
    "\004\130\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\104\006\041\007\027\010\040" +
    "\012\031\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\103" +
    "\006\041\007\027\010\040\012\031\045\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\102\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\016\004" +
    "\101\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\016\004\100\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\016\004\077\006\041\007\027\010\040" +
    "\012\031\045\042\001\001\000\016\004\076\006\041\007" +
    "\027\010\040\012\031\045\042\001\001\000\016\004\074" +
    "\006\041\007\027\010\040\012\031\045\042\001\001\000" +
    "\016\004\073\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\016\004\072\006\041\007\027\010\040\012" +
    "\031\045\042\001\001\000\016\004\071\006\041\007\027" +
    "\010\040\012\031\045\042\001\001\000\016\004\070\006" +
    "\041\007\027\010\040\012\031\045\042\001\001\000\016" +
    "\004\067\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\016\004\066\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\016\004\065\006\041\007\027\010" +
    "\040\012\031\045\042\001\001\000\016\004\064\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\110\006\041\007\027\010" +
    "\040\011\112\012\031\045\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\115\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\121\006\041\007\027\010\040\012\031" +
    "\044\120\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\124\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\126\006\041\007\027\010\040\012\031\045\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\017\027\255\001\001\000\004\040\133" +
    "\001\001\000\004\023\140\001\001\000\004\036\135\001" +
    "\001\000\004\041\136\001\001\000\002\001\001\000\004" +
    "\036\253\001\001\000\002\001\001\000\044\006\157\012" +
    "\161\013\144\014\153\015\171\017\170\020\143\021\160" +
    "\023\152\024\156\025\166\027\155\030\167\031\151\032" +
    "\154\034\164\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\227\006\041\007\027\010\040\012\031" +
    "\022\226\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\006\157\012\161\013\144\014" +
    "\153\015\171\017\170\020\143\021\207\023\152\025\211" +
    "\027\155\030\167\031\151\032\154\034\164\042\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\174\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\002\001\001\000\016\004\204\006\041\007\027\010" +
    "\040\012\031\045\042\001\001\000\006\036\021\037\200" +
    "\001\001\000\002\001\001\000\004\041\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\214\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\217\006\041\007\027\010\040\012\031\045\042\001" +
    "\001\000\002\001\001\000\040\006\157\012\161\013\144" +
    "\014\153\015\222\016\221\017\170\020\143\023\152\027" +
    "\155\030\167\031\151\032\154\034\164\042\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\157\012\161\013\144\014\153\015\222\016\225" +
    "\017\170\020\143\023\152\027\155\030\167\031\151\032" +
    "\154\034\164\042\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\231\006\041\007" +
    "\027\010\040\012\031\045\042\001\001\000\002\001\001" +
    "\000\016\004\233\006\041\007\027\010\040\012\031\045" +
    "\042\001\001\000\002\001\001\000\036\006\157\012\161" +
    "\013\144\014\153\015\235\017\170\020\143\023\152\027" +
    "\155\030\167\031\151\032\154\034\164\042\145\001\001" +
    "\000\002\001\001\000\010\012\017\027\243\033\241\001" +
    "\001\000\016\004\240\006\041\007\027\010\040\012\031" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\250\006\041" +
    "\007\027\010\040\012\031\045\042\001\001\000\016\004" +
    "\246\006\041\007\027\010\040\012\031\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\027\243\033\252\001\001\000\002\001\001" +
    "\000\004\041\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	//NOTE: the two error functions are mutually exclusive  since syntax_error() is throwing exception!
	
	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
		
		
	}
	
	public void unrecovered_syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		report_fatal_error("", t);	
	}

	public void report_fatal_error(String message, Object info){	
		Token t = (Token)info;
		if (t != null){
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		}
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

 	public void debug_message(String mess) {	
 		try{
		//modify default debug message to replace terminal id with token name
	 		if(mess.contains("term #")){
	 			Pattern p=Pattern.compile("([0-9]+)");
		 		Matcher m=p.matcher(mess);
		 		m.find();
		 		int tokid=Integer.parseInt(m.group(0));
		 		String tokname="debug mess error";
		 		for(Field tid : sym.class.getFields()){
		 			if(tid.getInt(tid)==tokid){
		 				tokname=tid.getName();
		 				break;
		 			}
		 		}
				String bettermess=mess.replaceFirst("#[0-9]+",tokname);
				System.err.println(bettermess);
	 		}
			else
	 			System.err.println(mess);
 		}
 		catch(Exception e){
 			System.err.println(mess);
 		}
		
		//System.err.println(mess);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // program ::= program func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // program ::= func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // program ::= use_list func_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode p = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // use_list ::= use_list use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode l = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)l;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // use_list ::= use_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types block 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<XiPrimitiveType> types = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode block = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, (BlockNode)block, span(id.position(), block.position()));
		RESULT = func_decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<XiPrimitiveType> arr = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // types ::= COLON type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<XiPrimitiveType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // types ::= 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		 RESULT = new ArrayList<XiPrimitiveType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // func_list ::= func_list COMMA var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // func_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // use_stmt ::= USE id SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // use_stmt ::= USE id 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // var_set ::= id_brackets GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // var_set ::= id GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // id_brackets ::= id_brackets OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListIndexNode base = (ListIndexNode)id;
	   RESULT = new ListIndexNode(base, i, span(base.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // id_brackets ::= allowed_element_assign OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // allowed_element_assign ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // allowed_element_assign ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		AbstractSyntaxNode n = (AbstractSyntaxNode)(list.get(0));
		InstNode inst = new InstNode(list, e, span(n.position(), e.position()));
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inst",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var_list ::= var_list COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var_list ::= UNDERSCORE COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_list ::= UNDERSCORE 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnderscoreNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_item ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode t = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // final_var_init ::= error 
            {
              AbstractSyntaxNode RESULT =null;
		 
		  RESULT= new ErrorNode(null);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_init",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // final_var_init ::= final_var_decl GETS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int fvdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fvdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode fvd = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<VisualizableTreeNode> list= new ArrayList<VisualizableTreeNode>();
		  ((DeclNode)fvd).setInitialValue(e);
		  list.add(fvd);
		  InstNode inst = new InstNode(list, e, span(fvd.position(), e.position()));
		  RESULT=inst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_init",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // final_var_decl ::= id COLON final_type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		DeclNode decl = new DeclNode((IdNode)id, t, arr,id.position());
		  RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_var_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // final_type ::= FINAL BOOL 
            {
              String RESULT =null;
		int token1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int token1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token token2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= token1.value()+" "+token2.value();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // final_type ::= FINAL INT 
            {
              String RESULT =null;
		int token1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int token1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token token1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token token2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= token1.value()+" "+token2.value();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dimension ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode o = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dimension ::= 
            {
              AbstractSyntaxNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= BOOL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= INT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)list;
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = new BlockNode(null);
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block_stmt ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // block ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode stmts = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // block ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
	   ((BlockNode)RESULT).add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode list = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)list;
		r.add(expr); 
		r.position = span(r.position, expr.position());
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_list ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = new ReturnNode();
		r.add(expr);
		r.position = expr.position();
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return_stmt ::= return_stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // return_stmt ::= RETURN 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ReturnNode r = new ReturnNode(); 
		r.position = t.position(); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)s; 
		r.position = span(t.position(), s.position()); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(e, s, span(t.position(), s.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi ELSE stmt_w_semi 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode s1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_w_semi ::= stmt SEMICOLON 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_w_semi ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt_or_block ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt_or_block ::= stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode stmt = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= var_set 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= var_inst 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= var_decl 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= final_var_init 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= block 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureCallNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= BREAK 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BreakNode(b.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= while_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= if_stmt 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode s = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxNode RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arr_elements ::= expr 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode arr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token t = (Token)o, t2 = (Token)e; RESULT = new ListNode(span(o.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arr_index ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode i = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(expr, i, span(expr.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // func_callargs ::= func_callargs COMMA expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func_callargs ::= expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // func_callargs ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t1 = (Token)len, t2 = (Token)o;
		RESULT = new LengthNode(expr, span(t1.position(), t2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxNode id = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t = (Token)o;
		RESULT = new FuncCallNode((IdNode)id, args, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // uop ::= MINUS 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // uop ::= NOT 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode expr = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= id 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= arr_create 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= arr_index 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= bool_literal 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode b = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		long v = Long.parseLong(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= func_call 
            {
              AbstractSyntaxNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= MINUS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); ((UnNegNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= NOT expr 
            {
              AbstractSyntaxNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position()); ((UnNotNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MODULO expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MODULO");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIVIDE expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("DIVIDE");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr TIMES expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("TIMES");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MINUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr PLUS expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("PLUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr GT expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr LT expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr GEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr LEQ expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr NOT_EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("NOT_EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr EQUAL expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr OR expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("OR");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr AND expr 
            {
              AbstractSyntaxNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxNode e1 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxNode e2 = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("AND");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_literal ::= FALSE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(false, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bool_literal ::= TRUE 
            {
              AbstractSyntaxNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(true, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxNode start_val = (AbstractSyntaxNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

