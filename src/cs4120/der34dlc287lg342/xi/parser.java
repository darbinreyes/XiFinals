
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 08 21:18:13 EST 2011
//----------------------------------------------------

package cs4120.der34dlc287lg342.xi;

import edu.cornell.cs.cs4120.util.VisualizableTreeNode;
import edu.cornell.cs.cs4120.xi.AbstractSyntaxNode;
import edu.cornell.cs.cs4120.xi.CompilationException;
import edu.cornell.cs.cs4120.xi.lexer.Token;
import edu.cornell.cs.cs4120.xi.Position;
import cs4120.der34dlc287lg342.xi.ast.*;
import cs4120.der34dlc287lg342.xi.typechecker.XiPrimitiveType;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 08 21:18:13 EST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\046\003\000\002\046" +
    "\003\000\002\012\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\006\006\000\002\006\006\000" +
    "\002\042\002\000\002\042\003\000\002\042\005\000\002" +
    "\007\006\000\002\010\004\000\002\010\006\000\002\010" +
    "\007\000\002\011\003\000\002\011\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\027\003\000\002\027\003\000\002\017" +
    "\003\000\002\017\004\000\002\020\007\000\002\020\011" +
    "\000\002\021\007\000\002\022\004\000\002\022\003\000" +
    "\002\022\004\000\002\023\003\000\002\023\005\000\002" +
    "\024\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\006\000\002\026\003\000\002\026\004\000\002\025\003" +
    "\000\002\025\004\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\034\002\000\002\034\003\000\002" +
    "\030\006\000\002\037\002\000\002\037\006\000\002\032" +
    "\003\000\002\032\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\005\000\002\040\005\000\002\031\005\000" +
    "\002\014\003\000\002\014\003\000\002\013\006\000\002" +
    "\013\006\000\002\033\005\000\002\033\005\000\002\050" +
    "\004\000\002\050\005\000\002\041\002\000\002\041\003" +
    "\000\002\041\005\000\002\036\002\000\002\036\005\000" +
    "\002\036\006\000\002\047\010\000\002\003\003\000\002" +
    "\003\004\000\002\052\006\000\002\045\005\000\002\045" +
    "\005\000\002\053\005\000\002\043\003\000\002\043\003" +
    "\000\002\043\006\000\002\044\003\000\002\044\003\000" +
    "\002\044\004\000\002\044\004\000\002\051\007\000\002" +
    "\051\011\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\010\004\013\023\012\056\014\001\002\000" +
    "\010\002\uff8a\004\uff8a\056\uff8a\001\002\000\004\046\030" +
    "\001\002\000\006\004\uff9b\023\uff9b\001\002\000\010\002" +
    "\314\004\013\056\014\001\002\000\010\002\uff8b\004\uff8b" +
    "\056\uff8b\001\002\000\006\004\013\023\012\001\002\000" +
    "\004\004\013\001\002\000\110\004\ufffe\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\057\ufffe\061\ufffe\062\ufffe\001" +
    "\002\000\004\004\013\001\002\000\006\050\017\057\016" +
    "\001\002\000\004\004\013\001\002\000\004\004\013\001" +
    "\002\000\006\004\uff92\051\uff92\001\002\000\006\004\uff94" +
    "\051\uff94\001\002\000\010\004\uff95\043\301\051\uff95\001" +
    "\002\000\006\052\275\053\274\001\002\000\006\004\013" +
    "\051\272\001\002\000\010\046\030\052\031\053\027\001" +
    "\002\000\006\004\uff91\051\uff91\001\002\000\004\004\013" +
    "\001\002\000\010\004\013\047\uffa2\053\uffa2\001\002\000" +
    "\010\004\013\012\034\013\033\001\002\000\012\004\uffb3" +
    "\043\uffb3\044\uffb3\051\uffb3\001\002\000\042\004\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\043\uffb8" +
    "\044\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\061\uffb8\001\002\000\042\004\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\024\uffb9\043\uffb9\044\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\061\uffb9" +
    "\001\002\000\042\004\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\053\uffb7\054\uffb7\055\uffb7\061\uffb7\001\002\000" +
    "\012\004\uff99\043\uff99\044\037\051\uff99\001\002\000\032" +
    "\004\013\005\046\006\060\007\057\010\044\011\053\024" +
    "\052\026\054\032\042\045\uffb6\046\040\061\045\001\002" +
    "\000\032\004\013\005\046\006\060\007\057\010\044\011" +
    "\053\024\052\026\054\032\042\046\040\047\136\061\045" +
    "\001\002\000\040\025\072\026\067\027\077\030\070\031" +
    "\075\033\101\034\103\035\074\036\100\037\066\040\102" +
    "\041\071\042\076\044\073\045\uffb5\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\074\004" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\061\uffe5\001\002\000\074\004\000\016\000" +
    "\017\000\020\000\021\000\022\000\024\000\025\000\026" +
    "\000\027\000\030\000\031\000\033\000\034\000\035\000" +
    "\036\000\037\000\040\000\041\000\042\000\044\000\045" +
    "\000\047\000\050\000\051\000\053\000\054\000\055\000" +
    "\061\000\001\002\000\100\004\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054\ufffc\055\ufffc\061" +
    "\ufffc\062\ufffc\001\002\000\074\004\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\055\uffe8\061\uffe8" +
    "\001\002\000\074\004\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\053\uffeb\054\uffeb\055\uffeb\061\uffeb\001\002\000" +
    "\074\004\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\061\uffe6\001\002\000\100\004\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\044" +
    "\ufffd\045\ufffd\046\126\047\ufffd\050\ufffd\051\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\061\ufffd\062\ufffd\001\002\000\004\046" +
    "\123\001\002\000\074\004\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\044\uffff\045\uffff\047\uffff\050" +
    "\uffff\051\uffff\053\uffff\054\uffff\055\uffff\061\uffff\001\002" +
    "\000\030\004\013\005\046\006\060\007\057\010\044\011" +
    "\053\024\052\026\054\032\042\046\040\061\045\001\002" +
    "\000\074\004\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\061\uffe7\001\002\000\076\004" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\061\uffe4\062\063\001\002\000\074\004\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044" +
    "\uffea\045\uffea\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea" +
    "\055\uffea\061\uffea\001\002\000\074\004\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\061" +
    "\uffe9\001\002\000\004\045\062\001\002\000\042\004\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\043" +
    "\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\061\uffb2\001\002\000\004\004\013\001\002\000" +
    "\100\004\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\074\004\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\044\073\045\uffec\047\uffec\050\uffec\051\uffec" +
    "\053\uffec\054\uffec\055\uffec\061\uffec\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\030\004" +
    "\013\005\046\006\060\007\057\010\044\011\053\024\052" +
    "\026\054\032\042\046\040\061\045\001\002\000\074\004" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6" +
    "\025\072\026\067\027\077\030\070\031\075\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\044\073\045\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\061\ufff6\001\002\000\074\004\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\072\026" +
    "\067\027\077\030\070\031\075\033\101\034\103\035\074" +
    "\036\100\037\066\040\ufff9\041\071\042\076\044\073\045" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\061\ufff9\001\002\000\074\004\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\072\026\067\027\077" +
    "\030\070\031\075\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\044\073\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4\061\ufff4\001" +
    "\002\000\074\004\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\072\026\067\027\077\030\070\031" +
    "\075\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\044\073\045\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\061\ufff5\001\002\000\074" +
    "\004\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\044\073\045\ufff0\047\ufff0\050\ufff0\051\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\061\ufff0\001\002\000\074\004\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\072" +
    "\026\067\027\077\030\070\031\075\033\101\034\103\035" +
    "\074\036\100\037\ufff7\040\ufff7\041\ufff7\042\ufff7\044\073" +
    "\045\ufff7\047\ufff7\050\ufff7\051\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\061\ufff7\001\002\000\074\004\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\044\073\045\uffee\047" +
    "\uffee\050\uffee\051\uffee\053\uffee\054\uffee\055\uffee\061\uffee" +
    "\001\002\000\074\004\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\025\072\026\067\027\077\030\070" +
    "\031\075\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\044\073\045\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\053\ufff3\054\ufff3\055\ufff3\061\ufff3\001\002\000" +
    "\040\025\072\026\067\027\077\030\070\031\075\033\101" +
    "\034\103\035\074\036\100\037\066\040\102\041\071\042" +
    "\076\044\073\045\115\001\002\000\074\004\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\061\uffdb\001\002\000\074\004\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\077" +
    "\030\070\031\075\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\044\073\045\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\053\ufff2\054\ufff2\055\ufff2\061\ufff2\001" +
    "\002\000\074\004\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\072\026\067\027\077\030\070\031" +
    "\075\033\101\034\103\035\074\036\100\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\044\073\045\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\061\ufff8\001\002\000\074" +
    "\004\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\044\073\045\uffef\047\uffef\050\uffef\051\uffef\053\uffef" +
    "\054\uffef\055\uffef\061\uffef\001\002\000\074\004\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\077\030\070\031\075\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\044\073" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\061\ufff1\001\002\000\074\004\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\072\026\067\027" +
    "\077\030\070\031\075\033\101\034\103\035\074\036\100" +
    "\037\ufffa\040\ufffa\041\071\042\076\044\073\045\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\055\ufffa\061\ufffa" +
    "\001\002\000\030\004\013\005\046\006\060\007\057\010" +
    "\044\011\053\024\052\026\054\032\042\046\040\061\045" +
    "\001\002\000\040\025\072\026\067\027\077\030\070\031" +
    "\075\033\101\034\103\035\074\036\100\037\066\040\102" +
    "\041\071\042\076\044\073\047\125\001\002\000\074\004" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\061\uffdf\001\002\000\034\004\013\005\046" +
    "\006\060\007\057\010\044\011\053\024\052\026\054\032" +
    "\042\046\040\047\uffde\053\uffde\061\045\001\002\000\042" +
    "\025\072\026\067\027\077\030\070\031\075\033\101\034" +
    "\103\035\074\036\100\037\066\040\102\041\071\042\076" +
    "\044\073\047\uffdd\053\uffdd\001\002\000\006\047\132\053" +
    "\131\001\002\000\030\004\013\005\046\006\060\007\057" +
    "\010\044\011\053\024\052\026\054\032\042\046\040\061" +
    "\045\001\002\000\074\004\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\053\uffe0\054\uffe0\055\uffe0\061\uffe0\001\002" +
    "\000\042\025\072\026\067\027\077\030\070\031\075\033" +
    "\101\034\103\035\074\036\100\037\066\040\102\041\071" +
    "\042\076\044\073\047\uffdc\053\uffdc\001\002\000\074\004" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\044\073\045\uffed\047\uffed\050\uffed\051\uffed\053\uffed\054" +
    "\uffed\055\uffed\061\uffed\001\002\000\042\025\072\026\067" +
    "\027\077\030\070\031\075\033\101\034\103\035\074\036" +
    "\100\037\066\040\102\041\071\042\076\044\073\047\140" +
    "\053\137\001\002\000\074\004\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\044\uffda\045\uffda\047\uffda" +
    "\050\uffda\051\uffda\053\uffda\054\uffda\055\uffda\061\uffda\001" +
    "\002\000\032\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\047\142\061" +
    "\045\001\002\000\074\004\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3\061\uffe3\001\002" +
    "\000\042\025\072\026\067\027\077\030\070\031\075\033" +
    "\101\034\103\035\074\036\100\037\066\040\102\041\071" +
    "\042\076\044\073\047\uffd7\053\uffd7\001\002\000\074\004" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054" +
    "\uffd9\055\uffd9\061\uffd9\001\002\000\006\047\145\053\144" +
    "\001\002\000\030\004\013\005\046\006\060\007\057\010" +
    "\044\011\053\024\052\026\054\032\042\046\040\061\045" +
    "\001\002\000\074\004\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\053\uffd8\054\uffd8\055\uffd8\061\uffd8\001\002\000" +
    "\042\025\072\026\067\027\077\030\070\031\075\033\101" +
    "\034\103\035\074\036\100\037\066\040\102\041\071\042" +
    "\076\044\073\047\uffd6\053\uffd6\001\002\000\006\047\156" +
    "\053\155\001\002\000\006\047\uffa1\053\uffa1\001\002\000" +
    "\004\052\152\001\002\000\010\004\013\012\034\013\033" +
    "\001\002\000\042\004\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\024\uffb3\043\uffb3\044\uffb3\047\uffb3\050\uffb3" +
    "\051\uffb3\053\uffb3\054\uffb3\055\uffb3\061\uffb3\001\002\000" +
    "\042\004\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\024\uffb4\043\uffb4\044\037\047\uffb4\050\uffb4\051\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\061\uffb4\001\002\000\004\004\013" +
    "\001\002\000\010\050\uff9f\052\160\053\uff9f\001\002\000" +
    "\006\050\165\053\163\001\002\000\010\004\013\012\034" +
    "\013\033\001\002\000\010\044\uffb3\050\uffb3\053\uffb3\001" +
    "\002\000\010\044\037\050\uff9e\053\uff9e\001\002\000\010" +
    "\004\013\012\034\013\033\001\002\000\012\002\uff9c\004" +
    "\uff9c\051\uff9c\056\uff9c\001\002\000\026\004\013\016\174" +
    "\020\172\021\205\022\173\024\052\050\165\051\206\055" +
    "\166\061\045\001\002\000\006\043\uffae\053\uffae\001\002" +
    "\000\032\004\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\024\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4\061\uffd4" +
    "\001\002\000\006\043\256\044\257\001\002\000\006\043" +
    "\251\053\250\001\002\000\004\046\244\001\002\000\034" +
    "\004\013\005\046\006\060\007\057\010\044\011\053\024" +
    "\052\026\054\032\042\046\040\051\uffc5\054\uffc5\061\045" +
    "\001\002\000\004\046\230\001\002\000\032\004\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\050\uffd1" +
    "\051\uffd1\054\uffd1\055\uffd1\061\uffd1\001\002\000\004\044" +
    "\225\001\002\000\026\004\013\016\174\020\172\021\205" +
    "\022\173\024\052\050\165\051\222\055\166\061\045\001" +
    "\002\000\036\004\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\024\uffd0\043\uffaf\050\uffd0\051\uffd0\053\uffaf\054" +
    "\uffd0\055\uffd0\061\uffd0\001\002\000\032\004\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\050\uffcf\051" +
    "\uffcf\054\uffcf\055\uffcf\061\uffcf\001\002\000\034\004\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\044" +
    "\uffa9\050\uffd2\051\uffd2\054\uffd2\055\uffd2\061\uffd2\001\002" +
    "\000\006\051\220\054\217\001\002\000\014\043\ufffd\044" +
    "\ufffd\046\126\052\152\062\ufffd\001\002\000\032\004\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\050" +
    "\uffd3\051\uffd3\054\uffd3\055\uffd3\061\uffd3\001\002\000\036" +
    "\002\uffc1\004\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\050\uffc1\051\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\061\uffc1\001\002\000\032\004\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\024\uffce\050\uffce\051\uffce\054\uffce" +
    "\055\uffce\061\uffce\001\002\000\026\004\uffbb\016\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\024\uffbb\050\uffbb\051\uffbb\055\uffbb" +
    "\061\uffbb\001\002\000\010\043\215\044\uffaa\062\063\001" +
    "\002\000\032\004\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\061" +
    "\uffd5\001\002\000\030\004\uffbd\016\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\024\uffbd\050\uffbd\051\uffbd\054\214\055\uffbd\061" +
    "\uffbd\001\002\000\026\004\uffbc\016\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\024\uffbc\050\uffbc\051\uffbc\055\uffbc\061\uffbc\001" +
    "\002\000\030\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\061\045\001" +
    "\002\000\066\004\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\025\072\026\067\027\077\030\070\031" +
    "\075\033\101\034\103\035\074\036\100\037\066\040\102" +
    "\041\071\042\076\044\073\050\uffa6\051\uffa6\054\uffa6\055" +
    "\uffa6\061\uffa6\001\002\000\006\051\uffc4\054\uffc4\001\002" +
    "\000\036\002\uffc0\004\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\024\uffc0\050\uffc0\051\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\061\uffc0\001\002\000\006\051\224\054\217\001" +
    "\002\000\036\002\uffbf\004\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\050\uffbf\051\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\061\uffbf\001\002\000\026\004\uffba\016\uffba" +
    "\020\uffba\021\uffba\022\uffba\024\uffba\050\uffba\051\uffba\055" +
    "\uffba\061\uffba\001\002\000\036\002\uffbe\004\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\050\uffbe\051" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\061\uffbe\001\002\000\030" +
    "\004\013\005\046\006\060\007\057\010\044\011\053\024" +
    "\052\026\054\032\042\046\040\061\045\001\002\000\040" +
    "\025\072\026\067\027\077\030\070\031\075\033\101\034" +
    "\103\035\074\036\100\037\066\040\102\041\071\042\076" +
    "\044\073\045\227\001\002\000\006\043\uffa8\044\uffa8\001" +
    "\002\000\030\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\061\045\001" +
    "\002\000\040\025\072\026\067\027\077\030\070\031\075" +
    "\033\101\034\103\035\074\036\100\037\066\040\102\041" +
    "\071\042\076\044\073\047\232\001\002\000\022\004\013" +
    "\016\174\020\172\021\205\024\052\050\165\055\166\061" +
    "\045\001\002\000\032\004\uffc9\016\uffc9\017\236\020\uffc9" +
    "\021\uffc9\022\uffc9\024\uffc9\050\uffc9\051\uffc9\054\uffc9\055" +
    "\uffc9\061\uffc9\001\002\000\032\004\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\024\uffcb\050\uffcb\051\uffcb\054" +
    "\235\055\uffcb\061\uffcb\001\002\000\032\004\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca\050\uffca\051" +
    "\uffca\054\uffca\055\uffca\061\uffca\001\002\000\022\004\013" +
    "\016\174\020\172\021\205\024\052\050\165\055\166\061" +
    "\045\001\002\000\032\004\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\050\uffc8\051\uffc8\054\uffc8\055" +
    "\uffc8\061\uffc8\001\002\000\044\025\072\026\067\027\077" +
    "\030\070\031\075\033\101\034\103\035\074\036\100\037" +
    "\066\040\102\041\071\042\076\044\073\051\uffc3\053\uffc3" +
    "\054\uffc3\001\002\000\010\051\uffc6\053\242\054\uffc6\001" +
    "\002\000\030\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\061\045\001" +
    "\002\000\044\025\072\026\067\027\077\030\070\031\075" +
    "\033\101\034\103\035\074\036\100\037\066\040\102\041" +
    "\071\042\076\044\073\051\uffc2\053\uffc2\054\uffc2\001\002" +
    "\000\030\004\013\005\046\006\060\007\057\010\044\011" +
    "\053\024\052\026\054\032\042\046\040\061\045\001\002" +
    "\000\040\025\072\026\067\027\077\030\070\031\075\033" +
    "\101\034\103\035\074\036\100\037\066\040\102\041\071" +
    "\042\076\044\073\047\246\001\002\000\022\004\013\016" +
    "\174\020\172\021\205\024\052\050\165\055\166\061\045" +
    "\001\002\000\032\004\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7" +
    "\061\uffc7\001\002\000\006\004\013\055\254\001\002\000" +
    "\030\004\013\005\046\006\060\007\057\010\044\011\053" +
    "\024\052\026\054\032\042\046\040\061\045\001\002\000" +
    "\066\004\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\024\uffab\025\072\026\067\027\077\030\070\031\075\033" +
    "\101\034\103\035\074\036\100\037\066\040\102\041\071" +
    "\042\076\044\073\050\uffab\051\uffab\054\uffab\055\uffab\061" +
    "\uffab\001\002\000\006\043\uffac\053\uffac\001\002\000\006" +
    "\043\uffb0\053\uffb0\001\002\000\006\043\uffb1\053\uffb1\001" +
    "\002\000\030\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\061\045\001" +
    "\002\000\030\004\013\005\046\006\060\007\057\010\044" +
    "\011\053\024\052\026\054\032\042\046\040\061\045\001" +
    "\002\000\040\025\072\026\067\027\077\030\070\031\075" +
    "\033\101\034\103\035\074\036\100\037\066\040\102\041" +
    "\071\042\076\044\073\045\261\001\002\000\006\043\uffa7" +
    "\044\uffa7\001\002\000\066\004\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\025\072\026\067\027\077" +
    "\030\070\031\075\033\101\034\103\035\074\036\100\037" +
    "\066\040\102\041\071\042\076\044\073\050\uffa5\051\uffa5" +
    "\054\uffa5\055\uffa5\061\uffa5\001\002\000\006\004\013\055" +
    "\254\001\002\000\006\043\uffad\053\uffad\001\002\000\010" +
    "\044\uffb3\050\uffb3\053\uffb3\001\002\000\010\044\037\050" +
    "\uff9d\053\uff9d\001\002\000\006\047\uffa0\053\uffa0\001\002" +
    "\000\006\052\uff98\053\uff98\001\002\000\006\004\uff90\051" +
    "\uff90\001\002\000\010\002\uff8e\004\uff8e\056\uff8e\001\002" +
    "\000\006\004\uff8f\051\uff8f\001\002\000\004\004\013\001" +
    "\002\000\010\004\013\012\034\013\033\001\002\000\010" +
    "\004\uffb3\044\uffb3\051\uffb3\001\002\000\010\004\uff93\044" +
    "\037\051\uff93\001\002\000\006\052\uff97\053\uff97\001\002" +
    "\000\030\004\013\005\046\006\060\007\057\010\044\011" +
    "\053\024\052\026\054\032\042\046\040\061\045\001\002" +
    "\000\042\004\uff96\025\072\026\067\027\077\030\070\031" +
    "\075\033\101\034\103\035\074\036\100\037\066\040\102" +
    "\041\071\042\076\044\073\051\uff96\001\002\000\004\050" +
    "\304\001\002\000\004\004\013\001\002\000\006\004\013" +
    "\051\306\001\002\000\010\002\uff8d\004\uff8d\056\uff8d\001" +
    "\002\000\010\004\uffa4\023\uffa4\054\310\001\002\000\006" +
    "\004\uffa3\023\uffa3\001\002\000\006\004\uff9a\023\uff9a\001" +
    "\002\000\010\002\uff8c\004\uff8c\056\uff8c\001\002\000\010" +
    "\002\uff88\004\uff88\056\uff88\001\002\000\004\002\001\001" +
    "\002\000\010\002\uff89\004\uff89\056\uff89\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\016\002\006\003\010\012\004\047\007\050" +
    "\005\051\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\004\047\314\051\312\001" +
    "\001\000\002\001\001\000\010\012\004\047\311\050\310" +
    "\001\001\000\004\012\306\001\001\000\002\001\001\000" +
    "\004\012\014\001\001\000\002\001\001\000\004\012\302" +
    "\001\001\000\020\012\024\043\017\044\023\045\022\047" +
    "\025\052\021\053\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\024\043\270\045\022\047\272\052\021\053\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\267\001" +
    "\001\000\010\012\150\030\147\041\146\001\001\000\006" +
    "\012\034\035\031\001\001\000\004\037\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\040\006\046\007\047\010\042\012" +
    "\050\015\055\034\060\046\054\001\001\000\020\004\134" +
    "\006\046\007\047\010\042\012\050\015\055\046\054\001" +
    "\001\000\002\001\001\000\020\004\133\006\046\007\047" +
    "\010\042\012\050\015\055\046\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\064\006\046" +
    "\007\047\010\042\012\050\015\055\046\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\121\006\046\007\047\010\042\012\050\015\055\046" +
    "\054\001\001\000\020\004\120\006\046\007\047\010\042" +
    "\012\050\015\055\046\054\001\001\000\020\004\117\006" +
    "\046\007\047\010\042\012\050\015\055\046\054\001\001" +
    "\000\020\004\116\006\046\007\047\010\042\012\050\015" +
    "\055\046\054\001\001\000\020\004\115\006\046\007\047" +
    "\010\042\012\050\015\055\046\054\001\001\000\020\004" +
    "\113\006\046\007\047\010\042\012\050\015\055\046\054" +
    "\001\001\000\020\004\112\006\046\007\047\010\042\012" +
    "\050\015\055\046\054\001\001\000\020\004\111\006\046" +
    "\007\047\010\042\012\050\015\055\046\054\001\001\000" +
    "\020\004\110\006\046\007\047\010\042\012\050\015\055" +
    "\046\054\001\001\000\020\004\107\006\046\007\047\010" +
    "\042\012\050\015\055\046\054\001\001\000\020\004\106" +
    "\006\046\007\047\010\042\012\050\015\055\046\054\001" +
    "\001\000\020\004\105\006\046\007\047\010\042\012\050" +
    "\015\055\046\054\001\001\000\020\004\104\006\046\007" +
    "\047\010\042\012\050\015\055\046\054\001\001\000\020" +
    "\004\103\006\046\007\047\010\042\012\050\015\055\046" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\123\006\046\007\047\010\042\012\050\015\055\046" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\126\006\046\007\047\010\042\012\050\015\055\042" +
    "\127\046\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\132\006\046\007\047\010\042\012\050\015" +
    "\055\046\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\140\006\046\007\047\010\042\011\142\012\050" +
    "\015\055\046\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\145" +
    "\006\046\007\047\010\042\012\050\015\055\046\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\034\035" +
    "\152\001\001\000\004\037\153\001\001\000\002\001\001" +
    "\000\006\012\150\030\266\001\001\000\004\036\156\001" +
    "\001\000\004\024\163\001\001\000\006\012\034\035\160" +
    "\001\001\000\004\037\161\001\001\000\002\001\001\000" +
    "\006\012\034\035\264\001\001\000\002\001\001\000\042" +
    "\006\201\012\203\013\167\014\175\015\210\016\212\020" +
    "\211\021\166\022\202\024\174\025\176\026\207\030\177" +
    "\031\200\033\206\040\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\237\006\046\007\047\010\042\012" +
    "\050\015\055\023\240\046\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\201\012" +
    "\203\013\167\014\175\015\210\016\212\020\211\021\166" +
    "\022\220\024\174\026\222\030\177\031\200\033\206\040" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\215\006\046\007\047\010\042" +
    "\012\050\015\055\046\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\225\006\046\007\047\010\042\012\050\015\055\046\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\230\006\046\007\047\010\042\012\050\015\055\046\054" +
    "\001\001\000\002\001\001\000\036\006\201\012\203\013" +
    "\167\014\175\015\210\016\233\017\232\020\211\021\166" +
    "\024\174\030\177\031\200\033\206\040\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\006\201\012\203\013\167\014\175\015\210\016\233\017" +
    "\236\020\211\021\166\024\174\030\177\031\200\033\206" +
    "\040\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\242\006\046\007\047\010\042" +
    "\012\050\015\055\046\054\001\001\000\002\001\001\000" +
    "\020\004\244\006\046\007\047\010\042\012\050\015\055" +
    "\046\054\001\001\000\002\001\001\000\034\006\201\012" +
    "\203\013\167\014\175\015\210\016\246\020\211\021\166" +
    "\024\174\030\177\031\200\033\206\040\170\001\001\000" +
    "\002\001\001\000\010\012\150\030\254\032\252\001\001" +
    "\000\020\004\251\006\046\007\047\010\042\012\050\015" +
    "\055\046\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\261\006" +
    "\046\007\047\010\042\012\050\015\055\046\054\001\001" +
    "\000\020\004\257\006\046\007\047\010\042\012\050\015" +
    "\055\046\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\150\030\254\032\263\001" +
    "\001\000\002\001\001\000\004\037\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\277" +
    "\001\001\000\006\012\034\035\275\001\001\000\004\037" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\301\006\046\007\047\010\042\012\050\015\055\046" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\024\043\017\044\304\045\022\047\025\052\021\053" +
    "\020\001\001\000\016\012\024\043\270\045\022\047\272" +
    "\052\021\053\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol cur_token){
		Token t = (Token)cur_token.value;
		if (t != null)
			throw new CompilationException("Syntax Error: Not expecting token "+t.type()+"("+t.value()+")", t.position());
		else
			throw new CompilationException("Syntax Error: Not expecting EOF", new XiPosition(0,0,0,0));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public Position span(Position left, Position right){
		return new XiPosition(left.unit(), left.columnStart(), right.columnEnd(), left.lineStart(), right.lineEnd());
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // program ::= program class_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // program ::= program func_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		program.position = span(p.position(), s.position());
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // program ::= class_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // program ::= func_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // program ::= use_list func_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree p = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)p;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // class_decl ::= CLASS id EXTENDS id OPEN_BRACE class_block CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree ex = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> b = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		class_node.ex = (IdNode)ex;
		RESULT = class_node;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // class_decl ::= CLASS id OPEN_BRACE class_block CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> b = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ClassNode class_node = new ClassNode((IdNode)id, span(c.position(), e.position()));
		class_node.children.addAll(b);
		RESULT = class_node;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // class_block ::= class_block func_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add(s);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // class_block ::= class_block varclass_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> decls = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.addAll(decls);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // class_block ::= func_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // class_block ::= varclass_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_block",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // varclass_list ::= idclass_list COLON type bracket_list 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<IdNode> idlist = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		for (IdNode id : idlist){
			list.add(new ClassDeclNode(id, t, arr, id.position()));
		}
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // varclass_list ::= varclass_inst 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // varclass_list ::= varclass_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // varclass_inst ::= varclass_decl GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree decl = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		ClassDeclNode cdecl = (ClassDeclNode)decl;
		cdecl.position = span(decl.position(), e.position());
		cdecl.expr = e;
		cdecl.children.add(e);
		RESULT = cdecl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_inst",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // idclass_list ::= idclass_list COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdNode> list = (ArrayList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		list.add((IdNode)id);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idclass_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // idclass_list ::= id COMMA id 
            {
              ArrayList<IdNode> RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ArrayList<IdNode> list = new ArrayList<IdNode>();
		list.add((IdNode)id1);
		list.add((IdNode)id2);
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idclass_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // varclass_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		ClassDeclNode decl = new ClassDeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varclass_decl",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // use_list ::= use_list use_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree l = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = (ProgramNode)l;
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // use_list ::= use_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ProgramNode program = new ProgramNode(s.position());
		program.add(s);
		RESULT = program; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // func_decl ::= id OPEN_PAREN func_list CLOSE_PAREN types block 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<XiPrimitiveType> types = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree block = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			FuncDeclNode func_decl = new FuncDeclNode((IdNode)id, list, types, (BlockNode)block, span(id.position(), block.position()));
		RESULT = func_decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // types ::= types COMMA type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<XiPrimitiveType> arr = (ArrayList<XiPrimitiveType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = arr;
		arr.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // types ::= COLON type bracket_list 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> dim = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<XiPrimitiveType>(); RESULT.add(new XiPrimitiveType(type, dim)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // types ::= 
            {
              ArrayList<XiPrimitiveType> RESULT =null;
		 RESULT = new ArrayList<XiPrimitiveType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("types",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // func_list ::= func_list COMMA var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // func_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // func_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // use_stmt ::= USE id SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // use_stmt ::= USE id 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UseNode(id, span(t.position(), id.position()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("use_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var_set ::= id_brackets GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_set ::= usable_id GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignmentNode((ExpressionNode)id, expr, span(id.position(), expr.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_set",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // id_brackets ::= id_brackets OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListIndexNode base = (ListIndexNode)id;
	   RESULT = new ListIndexNode(base, i, span(base.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // id_brackets ::= allowed_element_assign OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(id, i, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_brackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // allowed_element_assign ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // allowed_element_assign ::= usable_id 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("allowed_element_assign",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // var_inst ::= var_list GETS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// we assume that var_list cannot be empty
		AbstractSyntaxNode n = (AbstractSyntaxNode)(list.get(0));
		InstNode inst = new InstNode(list, e, span(n.position(), e.position()));
		RESULT = inst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_inst",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // var_list ::= var_list COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> list = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // var_list ::= UNDERSCORE COMMA var_item 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // var_list ::= UNDERSCORE 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(new UnderscoreNode(t.position()));
		RESULT = list;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // var_list ::= var_decl 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ArrayList<VisualizableTreeNode> list = new ArrayList<VisualizableTreeNode>();
		list.add(s);
		RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var_item ::= UNDERSCORE 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnderscoreNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // var_item ::= var_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_item",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bracket_list ::= bracket_list OPEN_BRACKET dimension CLOSE_BRACKET 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree t = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	if (arr == null) arr = new ArrayList<VisualizableTreeNode>();
		arr.add(t);
		RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bracket_list ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bracket_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // var_decl ::= id COLON type bracket_list 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisualizableTreeNode> arr = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			// check that arr is empty
		DeclNode decl = new DeclNode((IdNode)id, t, arr, id.position());
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dimension ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree o = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dimension ::= 
            {
              AbstractSyntaxTree RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ((IdNode)id).id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= BOOL 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= INT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o.value(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmt_list ::= stmt_list block_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree list = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)list;
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmt_list ::= block_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = new BlockNode(null);
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // block_stmt ::= stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // block_stmt ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // block ::= OPEN_BRACE stmt_list return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree stmts = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		block.add(s);
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // block ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree stmts = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			BlockNode block = (BlockNode)stmts;
		block.position = span(t.position(), e.position()); 
		RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // block ::= OPEN_BRACE return_stmt CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
	   ((BlockNode)RESULT).add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // block ::= OPEN_BRACE CLOSE_BRACE 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(span(t.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // return_list ::= return_list COMMA expr 
            {
              AbstractSyntaxTree RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree list = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)list;
		r.add(expr); 
		r.position = span(r.position, expr.position());
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // return_list ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = new ReturnNode();
		r.add(expr);
		r.position = expr.position();
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return_stmt ::= return_stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_stmt ::= RETURN 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ReturnNode r = new ReturnNode(); 
		r.position = t.position(); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return_stmt ::= RETURN return_list 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			ReturnNode r = (ReturnNode)s; 
		r.position = span(t.position(), s.position()); 
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // while_stmt ::= WHILE OPEN_PAREN expr CLOSE_PAREN stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(e, s, span(t.position(), s.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi ELSE stmt_w_semi 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree s1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e, s1, s2, span(t.position(), s2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_stmt ::= IF OPEN_PAREN expr CLOSE_PAREN stmt_w_semi 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(e1, stmt, null, span(t.position(), stmt.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt_w_semi ::= stmt SEMICOLON 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt_w_semi ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_w_semi",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt_or_block ::= block 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt_or_block ::= stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree stmt = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_or_block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= var_set 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= var_inst 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= var_decl 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= block 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureCallNode(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= BREAK 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BreakNode(b.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= while_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= if_stmt 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree s = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arr_elements ::= arr_elements COMMA expr 
            {
              AbstractSyntaxTree RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree arr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ListNode)arr).add(expr); RESULT = arr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arr_elements ::= expr 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ListNode list = new ListNode(expr.position()); list.add(expr); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_elements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arr_create ::= OPEN_PAREN expr COMMA arr_elements CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree arr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
		ListNode tl = (ListNode)arr;
		for (VisualizableTreeNode n : tl.children()) list.add((AbstractSyntaxNode)n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arr_create ::= OPEN_PAREN expr COMMA CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token t = (Token)o, t2 = (Token)e; 
		ListNode list = new ListNode(span(o.position(), e.position())); 
		list.add(expr);
		RESULT = list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arr_create ::= OPEN_PAREN CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Token t = (Token)o, t2 = (Token)e; RESULT = new ListNode(span(o.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_create",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arr_index ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree i = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListIndexNode(expr, i, span(expr.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_index",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // func_callargs ::= func_callargs COMMA expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // func_callargs ::= expr 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VisualizableTreeNode> args = new ArrayList<VisualizableTreeNode>(); args.add(expr); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // func_callargs ::= 
            {
              ArrayList<VisualizableTreeNode> RESULT =null;
		 RESULT = new ArrayList<VisualizableTreeNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_callargs",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // func_call ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t1 = (Token)len, t2 = (Token)o;
		RESULT = new LengthNode(expr, span(t1.position(), t2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func_call ::= id OPEN_PAREN func_callargs CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisualizableTreeNode> args = (ArrayList<VisualizableTreeNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token t = (Token)o;
		RESULT = new FuncCallNode((IdNode)id, args, span(id.position(), t.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // uop ::= MINUS 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // uop ::= NOT 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uop",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              AbstractSyntaxTree RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree expr = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= usable_id 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= arr_create 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= arr_index 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= bool_literal 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= STRING_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Token tok = (Token)s;
		Position p = tok.position();
		RESULT = new StringLiteralNode(tok.value(), p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= CHARACTER_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		int v = (int)(tok.value().charAt(0));
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= INTEGER_LITERAL 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Token tok = (Token)o;
		long v = Long.parseLong(tok.value());
		Position p = tok.position();
		RESULT = new IntegerLiteralNode(v, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= func_call 
            {
              AbstractSyntaxTree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MINUS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNegNode(t.position()); ((UnNegNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NOT expr 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnNotNode(t.position()); ((UnNotNode)RESULT).set(e, span(RESULT.position(), e.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr MODULO expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MODULO");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr DIVIDE expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("DIVIDE");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr TIMES expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("TIMES");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr MINUS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("MINUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr PLUS expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinNode("PLUS");
      ((BinNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr GT expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LT expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LT");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr GEQ expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("GEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr LEQ expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("LEQ");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr NOT_EQUAL expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("NOT_EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr EQUAL expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualityNode("EQUAL");
      ((EqualityNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr OR expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("OR");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr AND expr 
            {
              AbstractSyntaxTree RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree e1 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree e2 = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolOpNode("AND");
      ((BoolOpNode)RESULT).set(e1, e2, span(e1.position(), e2.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // usable_id ::= usable_id PERIOD id 
            {
              AbstractSyntaxTree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSyntaxTree a = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree b = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AttrNode(a, b, span(a.position(), b.position())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usable_id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // usable_id ::= THIS 
            {
              AbstractSyntaxTree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ThisNode(t.position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usable_id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usable_id ::= id 
            {
              AbstractSyntaxTree RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSyntaxTree id = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("usable_id",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id ::= IDENTIFIER 
            {
              AbstractSyntaxTree RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Token id = (Token)o;
		RESULT = new IdNode(id.value(), id.position());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bool_literal ::= FALSE 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(false, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bool_literal ::= TRUE 
            {
              AbstractSyntaxTree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteralNode(true, ((Token)b).position()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractSyntaxTree start_val = (AbstractSyntaxTree)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

